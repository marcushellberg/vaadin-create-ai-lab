vaadin.launch-browser=true
spring.application.name=ai
spring.threads.virtual.enabled=true

# Spring AI Anthropic configuration
spring.ai.anthropic.api-key=${ANTHROPIC_API_KEY}
spring.ai.anthropic.chat.options.model=claude-sonnet-4-5-20250929
# spring.ai.anthropic.chat.options.toolChoice={"type": "any"}

# Spring AI configuration
spring.ai.openai.api-key=${OPENAI_API_KEY}
spring.ai.openai.chat.options.model=gpt-5-chat-latest

# H2 Database configuration
spring.datasource.url=jdbc:h2:mem:flightdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=false
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# Observability configuration

# Enable context propagation for Reactor (required for Observability with streaming)
spring.reactor.context-propagation=auto


## metrics
management.endpoints.web.exposure.include=health, info, metrics, prometheus
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.observations.key-values.application=flight-booking-assistant

## percentiles histogram
management.metrics.distribution.percentiles-histogram.gen_ai.client.operation=true
management.metrics.distribution.percentiles-histogram.db.vector.client.operation=true
management.metrics.distribution.percentiles-histogram.spring.ai.chat.client=true
management.metrics.distribution.percentiles-histogram.spring.ai.tool=true

## logging
# logging.pattern.correlation=[${spring.application.name:},%X{traceId:-},%X{spanId:-}]

## tracing
management.tracing.sampling.probability=1.0
management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans

spring.ai.tools.observations.include-content=true

## Include the Chatclient input in observations
spring.ai.chat.client.observation.log-input=true

## Include the VectorStore query and response in observations
spring.ai.vectorstore.observations.log-query-response=true

## Include prompt and completion contents in observations
spring.ai.chat.observations.log-prompt=true
spring.ai.chat.observations.log-completion=true

## Include error logging in observations (note: not needed for Spring Web apps)
spring.ai.chat.observations.include-error-logging=true

logging.level.org.springframework.ai.chat.observation=DEBUG
